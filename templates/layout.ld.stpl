MEMORY
{
<% for memory in memories { %>
    <%- memory.name %> (<%- memory.mode %>) : ORIGIN = <%- memory.origin %>, LENGTH = <%- memory.length %>
<% } %>
}

ENTRY(reset);

SECTIONS
{
<% for stack_pointer in stack_pointers { %>
    STACK_POINTER_<%- stack_pointer.name %> = <%- stack_pointer.address %>;
<% } %>

<% if platform == "arm" { %>
    .vtable ORIGIN(FLASH_PROGRAM) :
    {
        LONG(STACK_POINTER_CORE_0);
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH_PROGRAM
<% } %>

    .text :
    {
        *(.text.reset);
        *(.text.*);
        . = ALIGN(4);
    } > FLASH_PROGRAM

    .rodata :
    {
        *(.rodata.*);
        . = ALIGN(4);
    } > FLASH_PROGRAM

<% for stream in streams { %>
    .stream_<%- stream.name %>_rt <%- stream.origin %> (NOLOAD) :
    {
        *(.stream_<%- stream.name %>_rt);
    } > RAM_<%- stream.ram %>
    .stream_<%- stream.name %>_buf ADDR(.stream_<%- stream.name %>_rt) + SIZEOF(.stream_<%- stream.name %>_rt) (NOLOAD) :
    {
        . += <%- stream.size %>;
    } > RAM_<%- stream.ram %>
    STREAM_<%- stream.uppercase_name %>_RT_BASE = ADDR(.stream_<%- stream.name %>_rt);
    STREAM_<%- stream.uppercase_name %>_RT_END = ADDR(.stream_<%- stream.name %>_rt) + SIZEOF(.stream_<%- stream.name %>_rt);
    STREAM_<%- stream.uppercase_name %>_BUF_BASE = ADDR(.stream_<%- stream.name %>_buf);
    STREAM_<%- stream.uppercase_name %>_BUF_END = ADDR(.stream_<%- stream.name %>_buf) + SIZEOF(.stream_<%- stream.name %>_buf);
<% } %>

    .data <%- data_origin %> :
    {
        *(.data.*);
        . = ALIGN(4);
    } > RAM_<%- data_ram %> AT > FLASH_PROGRAM
    DATA_LOAD = LOADADDR(.data);
    DATA_BASE = ADDR(.data);
    DATA_END = ADDR(.data) + SIZEOF(.data);

    .bss ADDR(.data) + SIZEOF(.data) (NOLOAD) :
    {
        *(.sbss);
        *(.bss.*);
        *(COMMON);
        . = ALIGN(4);
    } > RAM_<%- data_ram %>
    BSS_BASE = ADDR(.bss);
    BSS_END = ADDR(.bss) + SIZEOF(.bss);

<% for heap in heaps { %>
    .heap_<%- heap.name %>_rt_init :
    {
        <% for pool in &heap.pools { %>
            LONG(<%- pool.size %>);
            LONG(<%- pool.edge %>);
            LONG(0);
            LONG(<%- pool.uninit %>);
        <% } %>
    } > FLASH_PROGRAM
    .heap_<%- heap.name %>_rt <%- heap.origin %> (NOLOAD) :
    {
        *(.heap_<%- heap.name %>_rt);
    } > RAM_<%- heap.ram %>
    .heap_<%- heap.name %>_buf ADDR(.heap_<%- heap.name %>_rt) + SIZEOF(.heap_<%- heap.name %>_rt) (NOLOAD) :
    {
        . += <%- heap.size %>;
    } > RAM_<%- heap.ram %>
    HEAP_<%- heap.uppercase_name %>_RT_LOAD = LOADADDR(.heap_<%- heap.name %>_rt_init);
    HEAP_<%- heap.uppercase_name %>_RT_BASE = ADDR(.heap_<%- heap.name %>_rt);
    HEAP_<%- heap.uppercase_name %>_RT_END = ADDR(.heap_<%- heap.name %>_rt) + SIZEOF(.heap_<%- heap.name %>_rt);
    HEAP_<%- heap.uppercase_name %>_BUF_BASE = ADDR(.heap_<%- heap.name %>_buf);
    HEAP_<%- heap.uppercase_name %>_BUF_END = ADDR(.heap_<%- heap.name %>_buf) + SIZEOF(.heap_<%- heap.name %>_buf);
<% } %>

    /DISCARD/ :
    {
<% if platform == "arm" { %>
        *(.ARM.*)
<% } else if platform == "riscv" { %>
        *(.eh_frame .eh_frame_hdr)
<% } %>
    }
}

<% for block in include { %>
INCLUDE <%- block %>;
<% } %>
