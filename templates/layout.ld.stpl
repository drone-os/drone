MEMORY
{
<% for block in memory { %>
    <%- block.name %> (<%- block.mode %>) : ORIGIN = <%- block.origin %>, LENGTH = <%- block.length %>
<% } %>
}

ENTRY(reset);

SECTIONS
{
<% if stage_one { %>
    STACK_POINTER = ORIGIN(RAM);
<% } else { %>
    STACK_POINTER = ORIGIN(RAM) + LENGTH(RAM)
        - _data_section_size
        - _bss_section_size
        - _stream_rt_section_size
        - _stream_buffer_section_size
        - _heap_section_size;
<% } %>

<% if platform == "arm" { %>
    .vtable ORIGIN(FLASH) :
    {
        LONG(STACK_POINTER);
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH
<% } %>

    .text :
    {
        *(.text.reset);
        *(.text.*);
        . = ALIGN(4);
    } > FLASH

    .rodata :
    {
        *(.rodata.*);
        . = ALIGN(4);
    } > FLASH

    .data STACK_POINTER :
    {
        *(.data.*);
        . = ALIGN(4);
    } > RAM AT > FLASH

    .bss ADDR(.data) + SIZEOF(.data) (NOLOAD) :
    {
        *(.sbss);
        *(.bss.*);
        *(COMMON);
        . = ALIGN(4);
    } > RAM

    .stream_rt ADDR(.bss) + SIZEOF(.bss) (NOLOAD) :
    {
        *(.stream_rt.*);
        . = ALIGN(4);
    } > RAM

    .stream_buffer ADDR(.stream_rt) + SIZEOF(.stream_rt) (NOLOAD) :
    {
        . += <%- stream_size %>;
        . = ALIGN(4);
    } > RAM

    .heap ADDR(.stream_buffer) + SIZEOF(.stream_buffer) (NOLOAD) :
    {
        . += <%- main_heap_size %>;
        . = ALIGN(4);
    } > RAM

    DATA_LOAD = LOADADDR(.data);
    DATA_START = ADDR(.data);
    DATA_END = ADDR(.data) + SIZEOF(.data);
    BSS_START = ADDR(.bss);
    BSS_END = ADDR(.bss) + SIZEOF(.bss) + SIZEOF(.stream_rt);
    STREAM_START = ADDR(.stream_buffer);
    STREAM_END = ADDR(.stream_buffer) + SIZEOF(.stream_buffer);
    HEAP_START = ADDR(.heap);
    HEAP_END = ADDR(.heap) + SIZEOF(.heap);

    /DISCARD/ :
    {
<% if platform == "arm" { %>
        *(.ARM.*)
<% } else if platform == "riscv" { %>
        *(.eh_frame .eh_frame_hdr)
<% } %>
    }
}

<% for block in include { %>
INCLUDE <%- block %>;
<% } %>
