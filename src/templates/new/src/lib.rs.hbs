#![feature(allocator_api)]
#![feature(const_fn)]
#![feature(prelude_import)]
#![feature(proc_macro_hygiene)]
#![cfg_attr(not(feature = "std"), no_std)]

extern crate alloc;

pub mod tasks;
pub mod thr;

#[prelude_import]
#[allow(unused_imports)]
use drone_core::prelude::*;

use drone_core::heap;
use drone_{{bindings_name}}_map::{{bindings_name}}_reg_tokens;
{{~#if (eq dso_name "nrf91")}}

drone_nrf91_dso::set_log! {
    periph: Uarte0S,
    pin_number: 29,
    buf_size: 64,
}
{{~/if}}{{#if (or (eq log_ident "swoprobe") (eq log_ident "swoserial"))}}

drone_{{platform_name}}::swo::set_log!();
{{~/if}}

{{bindings_name}}_reg_tokens! {
    /// A set of tokens for all memory-mapped registers.
    pub struct Regs;
{{~#if dso_regs}}

{{dso_regs}}
{{~/if}}{{#if (or (eq log_ident "swoprobe") (eq log_ident "swoserial"))}}

    !dwt_cyccnt;
    !itm_tpr; !itm_tcr; !itm_lar;
    !tpiu_acpr; !tpiu_sppr; !tpiu_ffcr;
{{~/if}}

    !scb_ccr;
    !mpu_type; !mpu_ctrl; !mpu_rnr; !mpu_rbar; !mpu_rasr;
}

heap! {
    /// A heap allocator generated from the `Drone.toml`.
    pub struct Heap;
}

/// The global allocator.
#[cfg_attr(not(feature = "std"), global_allocator)]
pub static HEAP: Heap = Heap::new();
