MEMORY
{
    FLASH (rx) : ORIGIN = {{addr config.memory.flash.origin}}, LENGTH = {{size config.memory.flash.size}}
    RAM (wx) : ORIGIN = {{addr config.memory.ram.origin}}, LENGTH = {{size config.memory.ram.size}}
{{~ #each config.memory}}{{#if (and (ne @key "flash") (ne @key "ram"))}}
    {{upcase @key}} (wx) : ORIGIN = {{addr this.origin}}, LENGTH = {{size this.size}}
{{~ /if}}{{/each}}
}

ENTRY(reset);

SECTIONS
{
{{~ #unless stage_two}}
    STACK_POINTER = ORIGIN(RAM);
{{~ else}}
    STACK_POINTER = ORIGIN(RAM) + LENGTH(RAM)
        - _data_section_size
        - _bss_section_size
        - _log_section_size
        - _log_data_section_size
        - _heap_section_size;
{{~ /unless}}
{{~ #if (eq config.linker.platform "arm") }}

    .vtable ORIGIN(FLASH) :
    {
        LONG(STACK_POINTER);
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH
{{~ /if}}

    .text :
    {
        *(.text.reset);
        *(.text.*);
        . = ALIGN(4);
    } > FLASH

    .rodata :
    {
        *(.rodata.*);
        . = ALIGN(4);
    } > FLASH

    .data STACK_POINTER :
    {
        *(.data.*);
        . = ALIGN(4);
    } > RAM AT > FLASH

    .bss ADDR(.data) + SIZEOF(.data) (NOLOAD) :
    {
        *(.sbss);
        *(.bss.*);
        *(COMMON);
        . = ALIGN(4);
    } > RAM

    .log ADDR(.bss) + SIZEOF(.bss) (NOLOAD) :
    {
        *(.log.*);
        . = ALIGN(4);
    } > RAM

    .log_data ADDR(.log) + SIZEOF(.log) (NOLOAD) :
    {
        . += {{size config.log.size}};
        . = ALIGN(4);
    } > RAM

    .heap ADDR(.log_data) + SIZEOF(.log_data) (NOLOAD) :
    {
        . += {{size config.heap.main.size}};
        . = ALIGN(4);
    } > RAM

    DATA_LOAD = LOADADDR(.data);
    DATA_START = ADDR(.data);
    DATA_END = ADDR(.data) + SIZEOF(.data);
    BSS_START = ADDR(.bss);
    BSS_END = ADDR(.bss) + SIZEOF(.bss) + SIZEOF(.log);
    LOG_START = ADDR(.log_data);
    LOG_END = ADDR(.log_data) + SIZEOF(.log_data);
    HEAP_START = ADDR(.heap);
    HEAP_END = ADDR(.heap) + SIZEOF(.heap);

    /DISCARD/ :
    {
{{~ #if (eq config.linker.platform "arm") }}
        *(.ARM.*)
{{~ /if}}{{#if (eq config.linker.platform "riscv") }}
        *(.eh_frame .eh_frame_hdr)
{{~ /if}}
    }
}

{{~ #each config.linker.include}}
INCLUDE {{this}};
{{~ /each}}
