MEMORY
{
    FLASH (rx) : ORIGIN = {{addr config.memory.flash.origin}}, LENGTH = {{size config.memory.flash.size}}
    RAM (wx) : ORIGIN = {{addr config.memory.ram.origin}}, LENGTH = {{size config.memory.ram.size}}
}

ENTRY(reset);

SECTIONS
{
{{#unless stage_two}}
    STACK_POINTER = ORIGIN(RAM);
{{else}}
    STACK_POINTER = ORIGIN(RAM) + LENGTH(RAM)
        - _data_section_size
        - _bss_section_size
        - _dronereg_section_size
        - _heap_section_size;
{{/unless}}

{{#if (eq config.linker.platform "arm") }}
    .vtable ORIGIN(FLASH) :
    {
        LONG(STACK_POINTER);
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH
{{/if}}{{#if (eq config.linker.platform "riscv") }}
    .vtable ORIGIN(FLASH) :
    {
        /* assembler instruction: J reset */
        LONG(
            0x6F
            | ((reset & (1 << 20)) << (31 - 20))
            | ((reset & (((1 << 10) - 1) << 1)) << (21 - 1))
            | ((reset & (1 << 11)) << (20 - 11))
            | ((reset & (((1 << 8) - 1) << 12)) << (12 - 12))
        );
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH
{{/if}}{{#if (eq config.linker.platform "riscv-compact") }}
    .vtable ORIGIN(FLASH) :
    {
        /* assembler instruction: C.J reset */
        SHORT(
            0xA001
            | ((reset & (1 << 11)) << (12 - 11))
            | ((reset & (1 << 4)) << (11 - 4))
            | ((reset & (((1 << 2) - 1) << 8)) << (9 - 8))
            | ((reset & (1 << 10)) >> (10 - 8))
            | ((reset & (1 << 6)) << (7 - 6))
            | ((reset & (1 << 7)) >> (7 - 6))
            | ((reset & (((1 << 3) - 1) << 1)) << (3 - 1))
            | ((reset & (1 << 5)) >> (5 - 2))
        );
        . = ALIGN(4);
        KEEP(*(.rodata.VTABLE));
        . = ALIGN(4);
    } > FLASH
{{/if}}

    .text :
    {
        *(.text.reset);
        *(.text.*);
        . = ALIGN(4);
    } > FLASH

    .rodata :
    {
        *(.rodata.*);
        . = ALIGN(4);
    } > FLASH

    .bss STACK_POINTER (NOLOAD) :
    {
        BSS_START = .;
        *(.bss.*);
        *(COMMON);
        . = ALIGN(4);
        BSS_END = .;
    } > RAM

    .data ADDR(.bss) + SIZEOF(.bss) :
    {
        DATA_LOAD = LOADADDR(.data);
        DATA_START = .;
        *(.data.*);
    } > RAM AT > FLASH

    .dronereg ADDR(.data) + SIZEOF(.data) (NOLOAD) :
    {
        *(.dronereg.DSO_PORTS);
        . = ALIGN(4);
        DATA_END = .;
    } > RAM

    .heap ADDR(.dronereg) + SIZEOF(.dronereg) (NOLOAD) :
    {
        HEAP_START = .;
        . += {{size config.heap.size}};
        . = ALIGN(4);
        HEAP_END = .;
    } > RAM

    /DISCARD/ :
    {
{{#if (eq config.linker.platform "arm") }}
        *(.ARM.*)
{{/if}}{{#if (or (eq config.linker.platform "riscv")
                 (eq config.linker.platform "riscv-compact")) }}
        *(.eh_frame .eh_frame_hdr)
{{/if}}
    }
}

{{#each config.linker.include}}
INCLUDE {{this}};
{{/each}}
